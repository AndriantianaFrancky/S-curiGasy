import sys
import pyttsx3
import speech_recognition as sr
import requests  # Pour appeler l'API Google Maps
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget


class VoiceApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Interface avec Bouton Voice")
        self.setGeometry(100, 100, 400, 200)

        # Créer le bouton
        self.voice_button = QPushButton("Activer", self)
        self.voice_button.clicked.connect(self.on_voice_button_click)

        # Configurer le layout
        layout = QVBoxLayout()
        layout.addWidget(self.voice_button)

        # Configurer le widget central
        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

        # Initialiser le moteur de synthèse vocale
        self.engine = pyttsx3.init()

    def on_voice_button_click(self):
        # Action à effectuer lorsque le bouton est cliqué
        self.engine.say("Activation de l'écoute pour les bruits suspects.")
        self.engine.runAndWait()
        self.listen_for_suspicious_sounds()

    def listen_for_suspicious_sounds(self):
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            print("Écoute en cours...")
            try:
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
                text = recognizer.recognize_google(audio, language="fr-FR")
                print(f"Vous avez dit : {text}")
                # Vérifier si les mots-clés sont présents
                if any(keyword in text.lower() for keyword in ["danger", "alerte", "à l'aide", "au secours"]):
                    self.trigger_alert()
                else:
                    print("Aucun bruit suspect détecté.")
            except sr.UnknownValueError:
                print("Je n'ai pas compris le son.")
            except sr.RequestError as e:
                print("Erreur de connexion au service de reconnaissance vocale.")
            except Exception as e:
                print(f"Erreur : {e}")

    def trigger_alert(self):
        # Déclencher une alerte et obtenir la localisation
        self.engine.say("Alerte ! Bruit suspect détecté !")
        self.engine.runAndWait()
        print("Alerte déclenchée !")

        # Obtenir la localisation via l'API Google Maps
        location = self.get_location()
        if location:
            latitude, longitude = location
            print(f"Localisation : Latitude {latitude}, Longitude {longitude}")
            self.engine.say(f"Votre localisation est latitude {latitude} et longitude {longitude}.")
            self.engine.runAndWait()
        else:
            print("Impossible d'obtenir la localisation.")
            self.engine.say("Impossible d'obtenir votre localisation.")
            self.engine.runAndWait()

    def get_location(self):
        # Remplacez 'YOUR_API_KEY' par votre clé API Google Maps
        API_KEY = "YOUR_API_KEY"
        url = f"https://www.googleapis.com/geolocation/v1/geolocate?key={API_KEY}"
        try:
            response = requests.post(url, json={})
            if response.status_code == 200:
                data = response.json()
                latitude = data["location"]["lat"]
                longitude = data["location"]["lng"]
                return latitude, longitude
            else:
                print(f"Erreur API : {response.status_code}, {response.text}")
                return None
        except Exception as e:
            print(f"Erreur lors de l'appel à l'API : {e}")
            return None


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VoiceApp()
    window.show()
    sys.exit(app.exec_())
